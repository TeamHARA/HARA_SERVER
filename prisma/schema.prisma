generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model aloneOption {
  id                                              Int          @id(map: "AloneOption_pkey") @unique @default(autoincrement())
  worryAloneId                                    Int
  title                                           String       @db.VarChar(200)
  advantage                                       String?      @db.VarChar(50)
  disadvantage                                    String?      @db.VarChar(200)
  image                                           String?      @db.VarChar(100)
  hasImage                                        Boolean      @default(false)
  worryAlone_aloneOption_worryAloneIdToworryAlone worryAlone   @relation("aloneOption_worryAloneIdToworryAlone", fields: [worryAloneId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "worryAloneId")
  worryAlone_worryAlone_finalOptionToaloneOption  worryAlone[] @relation("worryAlone_finalOptionToaloneOption")
}

model category {
  id         Int          @id @unique @default(autoincrement())
  name       String       @db.VarChar(50)
  worryAlone worryAlone[]
  worryWith  worryWith[]
}

model comment {
  id          Int       @id(map: "Comment_pkey") @unique @default(autoincrement())
  content     String    @db.VarChar(200)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  worryWithId Int
  userId      Int
  isAnonymous Boolean   @default(false)
  user        user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
  worryWith   worryWith @relation(fields: [worryWithId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "worryWithId")
}

model quickWorry {
  id           Int            @id @unique @default(autoincrement())
  title        String         @db.VarChar(60)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @db.Timestamp(6)
  userId       Int
  user         user           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
  randomAnswer randomAnswer[]
}

model randomAnswer {
  id           Int        @id @unique @default(autoincrement())
  content      String     @db.VarChar(500)
  quickWorryId Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  lastSelected Boolean    @default(false)
  quickWorry   quickWorry @relation(fields: [quickWorryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quickWorryId")
}

model user {
  id           Int          @id @unique @default(autoincrement())
  profileImage String       @db.VarChar(200)
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @db.Timestamp(6)
  isAlarm      Boolean      @default(false)
  email        String       @db.VarChar(50)
  nickName     String       @db.VarChar(50)
  comment      comment[]
  quickWorry   quickWorry[]
  vote         vote[]
  worryAlone   worryAlone[]
  worryWith    worryWith[]
}

model vote {
  id         Int        @id @unique @default(autoincrement())
  userId     Int
  optionId   Int
  withOption withOption @relation(fields: [optionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "optionId")
  user       user       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}

model withOption {
  id                                          Int         @id @unique @default(autoincrement())
  worryWithId                                 Int
  title                                       String      @db.VarChar(200)
  advantage                                   String?     @db.VarChar(50)
  disadvantage                                String?     @db.VarChar(200)
  image                                       String?     @db.VarChar(300)
  hasImage                                    Boolean     @default(false)
  vote                                        vote[]
  worryWith_withOption_worryWithIdToworryWith worryWith   @relation("withOption_worryWithIdToworryWith", fields: [worryWithId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "worryWithId")
  worryWith_worryWith_finalOptionTowithOption worryWith[] @relation("worryWith_finalOptionTowithOption")
}

model worryAlone {
  id                                               Int           @id @unique @default(autoincrement())
  title                                            String        @db.VarChar(60)
  content                                          String        @db.VarChar(4000)
  finalOption                                      Int?
  createdAt                                        DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                                        DateTime      @default(now()) @db.Timestamp(6)
  categoryId                                       Int
  userId                                           Int
  aloneOption_aloneOption_worryAloneIdToworryAlone aloneOption[] @relation("aloneOption_worryAloneIdToworryAlone")
  category                                         category      @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "categoryId")
  aloneOption_worryAlone_finalOptionToaloneOption  aloneOption?  @relation("worryAlone_finalOptionToaloneOption", fields: [finalOption], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finalOption")
  user                                             user          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}

model worryWith {
  id                                           Int          @id @unique @default(autoincrement())
  title                                        String       @db.VarChar(60)
  content                                      String       @db.VarChar(4000)
  finalOption                                  Int?
  createdAt                                    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt                                    DateTime?    @default(now()) @db.Timestamp(6)
  categoryId                                   Int
  userId                                       Int
  commentOn                                    Boolean      @default(false)
  commentCount                                 Int          @default(0)
  isAuthor                                     Boolean      @default(false)
  comment                                      comment[]
  withOption                                   withOption[] @relation("withOption_worryWithIdToworryWith")
  category                                     category     @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "categoryId")
  withOption_worryWith_finalOptionTowithOption withOption?  @relation("worryWith_finalOptionTowithOption", fields: [finalOption], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finalOption")
  user                                         user         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}
