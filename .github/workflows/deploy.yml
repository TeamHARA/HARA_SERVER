# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [18.11.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Npm -v
        run: npm -v

      - name: create env file
        working-directory: ./
        run: |
          pwd
          touch .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          cat .env
      
      # yarn.lock을 hash로 하는 node_modules cache 생성
      - name: Cache Yarn
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          
      # cache hit 못하면 패키지 설치
      - name: Install dependencies
        working-directory: ./
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn
        
      - name: tsc 실행
        working-directory: ./
        run: yarn run build
        
      - name: zip file
        run: zip -r hara.zip ./dist ./scripts ./appspec.yml ./.env ./package.json ./prisma

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./hara.zip s3://hara-build/deploy/

      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name hara-codedeploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name dev
          --s3-location bucket=hara-build,bundleType=zip,key=deploy/hara.zip
